# TfIdfVectorizer
import ivy
import numpy as np

class TfIdfVectorizer:
    def __init__(self):
        self.vocab = {}
        self.idf = None

    def fit(self, documents):
        # Build vocabulary
        for doc in documents:
            words = doc.split()
            for word in words:
                if word not in self.vocab:
                    self.vocab[word] = len(self.vocab)

        # Compute IDF
        doc_count = len(documents)
        self.idf = np.zeros(len(self.vocab))
        for word, idx in self.vocab.items():
            doc_with_word_count = sum(1 for doc in documents if word in doc)
            self.idf[idx] = np.log(doc_count / doc_with_word_count) if doc_with_word_count > 0 else 0


    def transform(self, documents):
        features = np.zeros((len(documents), len(self.vocab)))
        for i, doc in enumerate(documents):
            words = doc.split()
            word_freq = {word: words.count(word) for word in words}
            for word, freq in word_freq.items():
                if word in self.vocab:
                    features[i, self.vocab[word]] = freq * self.idf[self.vocab[word]]
        return features

    def fit_transform(self, documents):
        self.fit(documents)
        return self.transform(documents)

# Example usage
documents = [
    "This is the first document",
    "This document is the second document",
    "And this is the third one",
    "Is this the first document?"
]

vectorizer = TfIdfVectorizer()
tfidf_matrix = vectorizer.fit_transform(documents)
print(tfidf_matrix)
